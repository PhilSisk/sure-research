#!/usr/bin/env python

import rospy
from std_msgs.msg import String, UInt16, Float32, Float64
from rctestpkg.msg import Motor_data, IMUdata, CarState
from rctestpkg.srv import MPC_LK, MPC_CC
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3
from sensor_msgs.msg import LaserScan

from scipy.integrate import ode
import numpy as np
import math
import matplotlib.pyplot as plt
from getLatDynMat import *

def CarState_callback(data):
    global X, Y, yaw, h, vl, u, y, v, psi, r, rd
    X = data.x_global
    Y = data.y_global
    yaw = data.yaw_global
    h = data.h
    vl = data.vl
    u = data.u
    y = data.y
    v = data.v
    psi = data.psi
    r = data.r
    rd = data.rd

def Control_callback(data):
    global manual_steer, right_lane, manual_v, stop, command_v
    manual_steer = data.manual_steer
    right_lane = data.right_lane
    manual_v = data.manual_v
    stop = data.stop
    command_v = data.command_v

X = 0.0 # Global X
Y = 0.0 # Global Y
yaw = 0.0 # Global yaw
h = 8.0
vl = 0.0
u = 0.0
y = 0.0
v = 0.0
psi = 0.0
r = 0.0
rd = 0.0
prev_i = 0.0
prev_s = 0.0
servoRatio = 8.9479e-04
SERVOMID = 1537
LANEWIDTH = 0.6
VMAX = 0.5

manual_steer = True
right_lane = True
manual_v = True
stop = False
command_v = 0.0

rospy.init_node('Central_control2')
servo_pub = rospy.Publisher("servo", UInt16, queue_size=10)
motor_pub = rospy.Publisher("Motor_command2", Float32, queue_size=10)

rospy.Subscriber("car_state", CarState, CarState_callback)

print "Servo ratio: ", servoRatio

servoMsg = UInt16()
servoMsg.data = SERVOMID
rate = rospy.Rate(1.0)

while not rospy.is_shutdown():
	rate.sleep()
	u_current = 0.5
	if u_current > 0.1:
		print "start LK"
		rospy.wait_for_service('MPC_LK2', 0.1)
		try:
			MPC_LK_compute = rospy.ServiceProxy('MPC_LK2', MPC_LK)
			if right_lane:
			    y0 = y - LANEWIDTH
			else:
			    y0 = y + LANEWIDTH
			v0,p0,r0,s0 = v,psi,r,prev_s
			wy,wv,wp,wr,ws = 100.0, 10.0, 50.0, 30.0, 10.0
			y_max,y_min,v_max,p_max,r_max,s_max = 0.8,-0.8,0.5,50.0/180.0*np.pi,20.0/180.0*np.pi,15.0/180.0*np.pi
			A,B,E = getLatDynMat(u_current)
			print A
			print B
			print E
			rd = tuple(np.zeros((21,), dtype = np.float64))
			resp = MPC_LK_compute(y0,v0,p0,r0,s0,wy,wv,wp,wr,ws,y_max,y_min,v_max,p_max,r_max,s_max,A,B,E,rd)
			servoMsg.data = SERVOMID + int(resp.s/servoRatio)
			print "Computed steer: ", int(resp.s/servoRatio)
			servo_pub.publish(servoMsg)
		except rospy.ServiceException, e:
			print "Service call failed for LK: %s"%e
