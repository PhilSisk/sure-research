# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rctestpkg/MPC_ACCRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MPC_ACCRequest(genpy.Message):
  _md5sum = "5589db02a572336b9368dadb6c56763f"
  _type = "rctestpkg/MPC_ACCRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 u0
float64 h0
float64 vl
float64 i0
float64 wv
float64 wh
float64 wi
float64 h_stop
float64 T_gap
float64 v_max
float64 v_min
float64 h_min
float64 i_max
float64 i_min
"""
  __slots__ = ['u0','h0','vl','i0','wv','wh','wi','h_stop','T_gap','v_max','v_min','h_min','i_max','i_min']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u0,h0,vl,i0,wv,wh,wi,h_stop,T_gap,v_max,v_min,h_min,i_max,i_min

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MPC_ACCRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.u0 is None:
        self.u0 = 0.
      if self.h0 is None:
        self.h0 = 0.
      if self.vl is None:
        self.vl = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.wv is None:
        self.wv = 0.
      if self.wh is None:
        self.wh = 0.
      if self.wi is None:
        self.wi = 0.
      if self.h_stop is None:
        self.h_stop = 0.
      if self.T_gap is None:
        self.T_gap = 0.
      if self.v_max is None:
        self.v_max = 0.
      if self.v_min is None:
        self.v_min = 0.
      if self.h_min is None:
        self.h_min = 0.
      if self.i_max is None:
        self.i_max = 0.
      if self.i_min is None:
        self.i_min = 0.
    else:
      self.u0 = 0.
      self.h0 = 0.
      self.vl = 0.
      self.i0 = 0.
      self.wv = 0.
      self.wh = 0.
      self.wi = 0.
      self.h_stop = 0.
      self.T_gap = 0.
      self.v_max = 0.
      self.v_min = 0.
      self.h_min = 0.
      self.i_max = 0.
      self.i_min = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14d.pack(_x.u0, _x.h0, _x.vl, _x.i0, _x.wv, _x.wh, _x.wi, _x.h_stop, _x.T_gap, _x.v_max, _x.v_min, _x.h_min, _x.i_max, _x.i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.u0, _x.h0, _x.vl, _x.i0, _x.wv, _x.wh, _x.wi, _x.h_stop, _x.T_gap, _x.v_max, _x.v_min, _x.h_min, _x.i_max, _x.i_min,) = _struct_14d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14d.pack(_x.u0, _x.h0, _x.vl, _x.i0, _x.wv, _x.wh, _x.wi, _x.h_stop, _x.T_gap, _x.v_max, _x.v_min, _x.h_min, _x.i_max, _x.i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.u0, _x.h0, _x.vl, _x.i0, _x.wv, _x.wh, _x.wi, _x.h_stop, _x.T_gap, _x.v_max, _x.v_min, _x.h_min, _x.i_max, _x.i_min,) = _struct_14d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14d = struct.Struct("<14d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rctestpkg/MPC_ACCResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MPC_ACCResponse(genpy.Message):
  _md5sum = "a9f4a5c0884188be1366c39b3fd904c8"
  _type = "rctestpkg/MPC_ACCResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 i

"""
  __slots__ = ['i']
  _slot_types = ['float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       i

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MPC_ACCResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.i is None:
        self.i = 0.
    else:
      self.i = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.i))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.i,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.i))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.i,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
class MPC_ACC(object):
  _type          = 'rctestpkg/MPC_ACC'
  _md5sum = 'cf39216e8627c9fbf3a389da0b0de171'
  _request_class  = MPC_ACCRequest
  _response_class = MPC_ACCResponse
