// Generated by gencpp from file rctestpkg/IMUdata.msg
// DO NOT EDIT!


#ifndef RCTESTPKG_MESSAGE_IMUDATA_H
#define RCTESTPKG_MESSAGE_IMUDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rctestpkg
{
template <class ContainerAllocator>
struct IMUdata_
{
  typedef IMUdata_<ContainerAllocator> Type;

  IMUdata_()
    : time(0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , gx(0.0)
    , gy(0.0)
    , gz(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)  {
    }
  IMUdata_(const ContainerAllocator& _alloc)
    : time(0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , gx(0.0)
    , gy(0.0)
    , gz(0.0)
    , mx(0.0)
    , my(0.0)
    , mz(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _time_type;
  _time_type time;

   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;

   typedef double _az_type;
  _az_type az;

   typedef double _gx_type;
  _gx_type gx;

   typedef double _gy_type;
  _gy_type gy;

   typedef double _gz_type;
  _gz_type gz;

   typedef double _mx_type;
  _mx_type mx;

   typedef double _my_type;
  _my_type my;

   typedef double _mz_type;
  _mz_type mz;




  typedef boost::shared_ptr< ::rctestpkg::IMUdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rctestpkg::IMUdata_<ContainerAllocator> const> ConstPtr;

}; // struct IMUdata_

typedef ::rctestpkg::IMUdata_<std::allocator<void> > IMUdata;

typedef boost::shared_ptr< ::rctestpkg::IMUdata > IMUdataPtr;
typedef boost::shared_ptr< ::rctestpkg::IMUdata const> IMUdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rctestpkg::IMUdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rctestpkg::IMUdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rctestpkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rctestpkg': ['/home/ubuntu/phil_catkin_ws/src/rctestpkg/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::IMUdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::IMUdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::IMUdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::IMUdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::IMUdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::IMUdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rctestpkg::IMUdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8af935f52c34c17eaf99062f0e9ba26d";
  }

  static const char* value(const ::rctestpkg::IMUdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8af935f52c34c17eULL;
  static const uint64_t static_value2 = 0xaf99062f0e9ba26dULL;
};

template<class ContainerAllocator>
struct DataType< ::rctestpkg::IMUdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rctestpkg/IMUdata";
  }

  static const char* value(const ::rctestpkg::IMUdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rctestpkg::IMUdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 time\n\
float64 ax\n\
float64 ay\n\
float64 az\n\
float64 gx\n\
float64 gy\n\
float64 gz\n\
float64 mx\n\
float64 my\n\
float64 mz\n\
";
  }

  static const char* value(const ::rctestpkg::IMUdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rctestpkg::IMUdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.gx);
      stream.next(m.gy);
      stream.next(m.gz);
      stream.next(m.mx);
      stream.next(m.my);
      stream.next(m.mz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMUdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rctestpkg::IMUdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rctestpkg::IMUdata_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<double>::stream(s, indent + "  ", v.az);
    s << indent << "gx: ";
    Printer<double>::stream(s, indent + "  ", v.gx);
    s << indent << "gy: ";
    Printer<double>::stream(s, indent + "  ", v.gy);
    s << indent << "gz: ";
    Printer<double>::stream(s, indent + "  ", v.gz);
    s << indent << "mx: ";
    Printer<double>::stream(s, indent + "  ", v.mx);
    s << indent << "my: ";
    Printer<double>::stream(s, indent + "  ", v.my);
    s << indent << "mz: ";
    Printer<double>::stream(s, indent + "  ", v.mz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCTESTPKG_MESSAGE_IMUDATA_H
