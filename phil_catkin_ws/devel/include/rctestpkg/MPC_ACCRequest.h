// Generated by gencpp from file rctestpkg/MPC_ACCRequest.msg
// DO NOT EDIT!


#ifndef RCTESTPKG_MESSAGE_MPC_ACCREQUEST_H
#define RCTESTPKG_MESSAGE_MPC_ACCREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rctestpkg
{
template <class ContainerAllocator>
struct MPC_ACCRequest_
{
  typedef MPC_ACCRequest_<ContainerAllocator> Type;

  MPC_ACCRequest_()
    : u0(0.0)
    , h0(0.0)
    , vl(0.0)
    , i0(0.0)
    , wv(0.0)
    , wh(0.0)
    , wi(0.0)
    , h_stop(0.0)
    , T_gap(0.0)
    , v_max(0.0)
    , v_min(0.0)
    , h_min(0.0)
    , i_max(0.0)
    , i_min(0.0)  {
    }
  MPC_ACCRequest_(const ContainerAllocator& _alloc)
    : u0(0.0)
    , h0(0.0)
    , vl(0.0)
    , i0(0.0)
    , wv(0.0)
    , wh(0.0)
    , wi(0.0)
    , h_stop(0.0)
    , T_gap(0.0)
    , v_max(0.0)
    , v_min(0.0)
    , h_min(0.0)
    , i_max(0.0)
    , i_min(0.0)  {
  (void)_alloc;
    }



   typedef double _u0_type;
  _u0_type u0;

   typedef double _h0_type;
  _h0_type h0;

   typedef double _vl_type;
  _vl_type vl;

   typedef double _i0_type;
  _i0_type i0;

   typedef double _wv_type;
  _wv_type wv;

   typedef double _wh_type;
  _wh_type wh;

   typedef double _wi_type;
  _wi_type wi;

   typedef double _h_stop_type;
  _h_stop_type h_stop;

   typedef double _T_gap_type;
  _T_gap_type T_gap;

   typedef double _v_max_type;
  _v_max_type v_max;

   typedef double _v_min_type;
  _v_min_type v_min;

   typedef double _h_min_type;
  _h_min_type h_min;

   typedef double _i_max_type;
  _i_max_type i_max;

   typedef double _i_min_type;
  _i_min_type i_min;




  typedef boost::shared_ptr< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MPC_ACCRequest_

typedef ::rctestpkg::MPC_ACCRequest_<std::allocator<void> > MPC_ACCRequest;

typedef boost::shared_ptr< ::rctestpkg::MPC_ACCRequest > MPC_ACCRequestPtr;
typedef boost::shared_ptr< ::rctestpkg::MPC_ACCRequest const> MPC_ACCRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rctestpkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rctestpkg': ['/home/ubuntu/phil_catkin_ws/src/rctestpkg/msg'], 'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5589db02a572336b9368dadb6c56763f";
  }

  static const char* value(const ::rctestpkg::MPC_ACCRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5589db02a572336bULL;
  static const uint64_t static_value2 = 0x9368dadb6c56763fULL;
};

template<class ContainerAllocator>
struct DataType< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rctestpkg/MPC_ACCRequest";
  }

  static const char* value(const ::rctestpkg::MPC_ACCRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 u0\n\
float64 h0\n\
float64 vl\n\
float64 i0\n\
float64 wv\n\
float64 wh\n\
float64 wi\n\
float64 h_stop\n\
float64 T_gap\n\
float64 v_max\n\
float64 v_min\n\
float64 h_min\n\
float64 i_max\n\
float64 i_min\n\
";
  }

  static const char* value(const ::rctestpkg::MPC_ACCRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u0);
      stream.next(m.h0);
      stream.next(m.vl);
      stream.next(m.i0);
      stream.next(m.wv);
      stream.next(m.wh);
      stream.next(m.wi);
      stream.next(m.h_stop);
      stream.next(m.T_gap);
      stream.next(m.v_max);
      stream.next(m.v_min);
      stream.next(m.h_min);
      stream.next(m.i_max);
      stream.next(m.i_min);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MPC_ACCRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rctestpkg::MPC_ACCRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rctestpkg::MPC_ACCRequest_<ContainerAllocator>& v)
  {
    s << indent << "u0: ";
    Printer<double>::stream(s, indent + "  ", v.u0);
    s << indent << "h0: ";
    Printer<double>::stream(s, indent + "  ", v.h0);
    s << indent << "vl: ";
    Printer<double>::stream(s, indent + "  ", v.vl);
    s << indent << "i0: ";
    Printer<double>::stream(s, indent + "  ", v.i0);
    s << indent << "wv: ";
    Printer<double>::stream(s, indent + "  ", v.wv);
    s << indent << "wh: ";
    Printer<double>::stream(s, indent + "  ", v.wh);
    s << indent << "wi: ";
    Printer<double>::stream(s, indent + "  ", v.wi);
    s << indent << "h_stop: ";
    Printer<double>::stream(s, indent + "  ", v.h_stop);
    s << indent << "T_gap: ";
    Printer<double>::stream(s, indent + "  ", v.T_gap);
    s << indent << "v_max: ";
    Printer<double>::stream(s, indent + "  ", v.v_max);
    s << indent << "v_min: ";
    Printer<double>::stream(s, indent + "  ", v.v_min);
    s << indent << "h_min: ";
    Printer<double>::stream(s, indent + "  ", v.h_min);
    s << indent << "i_max: ";
    Printer<double>::stream(s, indent + "  ", v.i_max);
    s << indent << "i_min: ";
    Printer<double>::stream(s, indent + "  ", v.i_min);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCTESTPKG_MESSAGE_MPC_ACCREQUEST_H
