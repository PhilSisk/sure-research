# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rctestpkg/MPC_CCRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MPC_CCRequest(genpy.Message):
  _md5sum = "6d63799ae9c8d735efe96102018bc751"
  _type = "rctestpkg/MPC_CCRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 vr
float64 u0
float64 i0
float64 wv
float64 wi
float64 i_max
float64 i_min
"""
  __slots__ = ['vr','u0','i0','wv','wi','i_max','i_min']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vr,u0,i0,wv,wi,i_max,i_min

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MPC_CCRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vr is None:
        self.vr = 0.
      if self.u0 is None:
        self.u0 = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.wv is None:
        self.wv = 0.
      if self.wi is None:
        self.wi = 0.
      if self.i_max is None:
        self.i_max = 0.
      if self.i_min is None:
        self.i_min = 0.
    else:
      self.vr = 0.
      self.u0 = 0.
      self.i0 = 0.
      self.wv = 0.
      self.wi = 0.
      self.i_max = 0.
      self.i_min = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.vr, _x.u0, _x.i0, _x.wv, _x.wi, _x.i_max, _x.i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.vr, _x.u0, _x.i0, _x.wv, _x.wi, _x.i_max, _x.i_min,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.vr, _x.u0, _x.i0, _x.wv, _x.wi, _x.i_max, _x.i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.vr, _x.u0, _x.i0, _x.wv, _x.wi, _x.i_max, _x.i_min,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rctestpkg/MPC_CCResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MPC_CCResponse(genpy.Message):
  _md5sum = "a9f4a5c0884188be1366c39b3fd904c8"
  _type = "rctestpkg/MPC_CCResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 i

"""
  __slots__ = ['i']
  _slot_types = ['float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       i

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MPC_CCResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.i is None:
        self.i = 0.
    else:
      self.i = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_d.pack(self.i))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.i,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_d.pack(self.i))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.i,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
class MPC_CC(object):
  _type          = 'rctestpkg/MPC_CC'
  _md5sum = '7ee2ffc9de4aa168b06f3b4ade84ca37'
  _request_class  = MPC_CCRequest
  _response_class = MPC_CCResponse
