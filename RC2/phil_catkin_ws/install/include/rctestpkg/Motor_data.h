// Generated by gencpp from file rctestpkg/Motor_data.msg
// DO NOT EDIT!


#ifndef RCTESTPKG_MESSAGE_MOTOR_DATA_H
#define RCTESTPKG_MESSAGE_MOTOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rctestpkg
{
template <class ContainerAllocator>
struct Motor_data_
{
  typedef Motor_data_<ContainerAllocator> Type;

  Motor_data_()
    : position(0)
    , countPerSecond(0)
    , current(0.0)
    , h(0.0)
    , hdot(0.0)  {
    }
  Motor_data_(const ContainerAllocator& _alloc)
    : position(0)
    , countPerSecond(0)
    , current(0.0)
    , h(0.0)
    , hdot(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _position_type;
  _position_type position;

   typedef int64_t _countPerSecond_type;
  _countPerSecond_type countPerSecond;

   typedef double _current_type;
  _current_type current;

   typedef double _h_type;
  _h_type h;

   typedef double _hdot_type;
  _hdot_type hdot;




  typedef boost::shared_ptr< ::rctestpkg::Motor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rctestpkg::Motor_data_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_data_

typedef ::rctestpkg::Motor_data_<std::allocator<void> > Motor_data;

typedef boost::shared_ptr< ::rctestpkg::Motor_data > Motor_dataPtr;
typedef boost::shared_ptr< ::rctestpkg::Motor_data const> Motor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rctestpkg::Motor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rctestpkg::Motor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rctestpkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rctestpkg': ['/home/ubuntu/phil_catkin_ws/src/rctestpkg/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::Motor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::Motor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::Motor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::Motor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::Motor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::Motor_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rctestpkg::Motor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52f2e122b08e43f7a7e3b1d033bdba18";
  }

  static const char* value(const ::rctestpkg::Motor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52f2e122b08e43f7ULL;
  static const uint64_t static_value2 = 0xa7e3b1d033bdba18ULL;
};

template<class ContainerAllocator>
struct DataType< ::rctestpkg::Motor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rctestpkg/Motor_data";
  }

  static const char* value(const ::rctestpkg::Motor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rctestpkg::Motor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 position\n\
int64 countPerSecond\n\
float64 current\n\
float64 h\n\
float64 hdot\n\
";
  }

  static const char* value(const ::rctestpkg::Motor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rctestpkg::Motor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.countPerSecond);
      stream.next(m.current);
      stream.next(m.h);
      stream.next(m.hdot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rctestpkg::Motor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rctestpkg::Motor_data_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.position);
    s << indent << "countPerSecond: ";
    Printer<int64_t>::stream(s, indent + "  ", v.countPerSecond);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
    s << indent << "hdot: ";
    Printer<double>::stream(s, indent + "  ", v.hdot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCTESTPKG_MESSAGE_MOTOR_DATA_H
