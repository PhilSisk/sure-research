# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rctestpkg/IMUdata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUdata(genpy.Message):
  _md5sum = "8af935f52c34c17eaf99062f0e9ba26d"
  _type = "rctestpkg/IMUdata"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 time
float64 ax
float64 ay
float64 az
float64 gx
float64 gy
float64 gz
float64 mx
float64 my
float64 mz
"""
  __slots__ = ['time','ax','ay','az','gx','gy','gz','mx','my','mz']
  _slot_types = ['uint64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,ax,ay,az,gx,gy,gz,mx,my,mz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUdata, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0
      if self.ax is None:
        self.ax = 0.
      if self.ay is None:
        self.ay = 0.
      if self.az is None:
        self.az = 0.
      if self.gx is None:
        self.gx = 0.
      if self.gy is None:
        self.gy = 0.
      if self.gz is None:
        self.gz = 0.
      if self.mx is None:
        self.mx = 0.
      if self.my is None:
        self.my = 0.
      if self.mz is None:
        self.mz = 0.
    else:
      self.time = 0
      self.ax = 0.
      self.ay = 0.
      self.az = 0.
      self.gx = 0.
      self.gy = 0.
      self.gz = 0.
      self.mx = 0.
      self.my = 0.
      self.mz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Q9d.pack(_x.time, _x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.time, _x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz,) = _struct_Q9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Q9d.pack(_x.time, _x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.time, _x.ax, _x.ay, _x.az, _x.gx, _x.gy, _x.gz, _x.mx, _x.my, _x.mz,) = _struct_Q9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q9d = struct.Struct("<Q9d")
