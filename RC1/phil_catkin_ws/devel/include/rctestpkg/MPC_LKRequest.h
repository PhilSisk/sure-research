// Generated by gencpp from file rctestpkg/MPC_LKRequest.msg
// DO NOT EDIT!


#ifndef RCTESTPKG_MESSAGE_MPC_LKREQUEST_H
#define RCTESTPKG_MESSAGE_MPC_LKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rctestpkg
{
template <class ContainerAllocator>
struct MPC_LKRequest_
{
  typedef MPC_LKRequest_<ContainerAllocator> Type;

  MPC_LKRequest_()
    : y0(0.0)
    , v0(0.0)
    , p0(0.0)
    , r0(0.0)
    , s0(0.0)
    , wy(0.0)
    , wv(0.0)
    , wp(0.0)
    , wr(0.0)
    , ws(0.0)
    , y_max(0.0)
    , y_min(0.0)
    , v_max(0.0)
    , p_max(0.0)
    , r_max(0.0)
    , s_max(0.0)
    , A()
    , B()
    , E()
    , rd()  {
    }
  MPC_LKRequest_(const ContainerAllocator& _alloc)
    : y0(0.0)
    , v0(0.0)
    , p0(0.0)
    , r0(0.0)
    , s0(0.0)
    , wy(0.0)
    , wv(0.0)
    , wp(0.0)
    , wr(0.0)
    , ws(0.0)
    , y_max(0.0)
    , y_min(0.0)
    , v_max(0.0)
    , p_max(0.0)
    , r_max(0.0)
    , s_max(0.0)
    , A(_alloc)
    , B(_alloc)
    , E(_alloc)
    , rd(_alloc)  {
  (void)_alloc;
    }



   typedef double _y0_type;
  _y0_type y0;

   typedef double _v0_type;
  _v0_type v0;

   typedef double _p0_type;
  _p0_type p0;

   typedef double _r0_type;
  _r0_type r0;

   typedef double _s0_type;
  _s0_type s0;

   typedef double _wy_type;
  _wy_type wy;

   typedef double _wv_type;
  _wv_type wv;

   typedef double _wp_type;
  _wp_type wp;

   typedef double _wr_type;
  _wr_type wr;

   typedef double _ws_type;
  _ws_type ws;

   typedef double _y_max_type;
  _y_max_type y_max;

   typedef double _y_min_type;
  _y_min_type y_min;

   typedef double _v_max_type;
  _v_max_type v_max;

   typedef double _p_max_type;
  _p_max_type p_max;

   typedef double _r_max_type;
  _r_max_type r_max;

   typedef double _s_max_type;
  _s_max_type s_max;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _A_type;
  _A_type A;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _B_type;
  _B_type B;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _E_type;
  _E_type E;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _rd_type;
  _rd_type rd;




  typedef boost::shared_ptr< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MPC_LKRequest_

typedef ::rctestpkg::MPC_LKRequest_<std::allocator<void> > MPC_LKRequest;

typedef boost::shared_ptr< ::rctestpkg::MPC_LKRequest > MPC_LKRequestPtr;
typedef boost::shared_ptr< ::rctestpkg::MPC_LKRequest const> MPC_LKRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rctestpkg::MPC_LKRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rctestpkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rctestpkg': ['/home/ubuntu/phil_catkin_ws/src/rctestpkg/msg'], 'sensor_msgs': ['/opt/ros/jade/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a13af95f0a28e8da29d99752aca488a9";
  }

  static const char* value(const ::rctestpkg::MPC_LKRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa13af95f0a28e8daULL;
  static const uint64_t static_value2 = 0x29d99752aca488a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rctestpkg/MPC_LKRequest";
  }

  static const char* value(const ::rctestpkg::MPC_LKRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 y0\n\
float64 v0\n\
float64 p0\n\
float64 r0\n\
float64 s0\n\
float64 wy\n\
float64 wv\n\
float64 wp\n\
float64 wr\n\
float64 ws\n\
float64 y_max\n\
float64 y_min\n\
float64 v_max\n\
float64 p_max\n\
float64 r_max\n\
float64 s_max\n\
float64[] A\n\
float64[] B\n\
float64[] E\n\
float64[] rd\n\
";
  }

  static const char* value(const ::rctestpkg::MPC_LKRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y0);
      stream.next(m.v0);
      stream.next(m.p0);
      stream.next(m.r0);
      stream.next(m.s0);
      stream.next(m.wy);
      stream.next(m.wv);
      stream.next(m.wp);
      stream.next(m.wr);
      stream.next(m.ws);
      stream.next(m.y_max);
      stream.next(m.y_min);
      stream.next(m.v_max);
      stream.next(m.p_max);
      stream.next(m.r_max);
      stream.next(m.s_max);
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.E);
      stream.next(m.rd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MPC_LKRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rctestpkg::MPC_LKRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rctestpkg::MPC_LKRequest_<ContainerAllocator>& v)
  {
    s << indent << "y0: ";
    Printer<double>::stream(s, indent + "  ", v.y0);
    s << indent << "v0: ";
    Printer<double>::stream(s, indent + "  ", v.v0);
    s << indent << "p0: ";
    Printer<double>::stream(s, indent + "  ", v.p0);
    s << indent << "r0: ";
    Printer<double>::stream(s, indent + "  ", v.r0);
    s << indent << "s0: ";
    Printer<double>::stream(s, indent + "  ", v.s0);
    s << indent << "wy: ";
    Printer<double>::stream(s, indent + "  ", v.wy);
    s << indent << "wv: ";
    Printer<double>::stream(s, indent + "  ", v.wv);
    s << indent << "wp: ";
    Printer<double>::stream(s, indent + "  ", v.wp);
    s << indent << "wr: ";
    Printer<double>::stream(s, indent + "  ", v.wr);
    s << indent << "ws: ";
    Printer<double>::stream(s, indent + "  ", v.ws);
    s << indent << "y_max: ";
    Printer<double>::stream(s, indent + "  ", v.y_max);
    s << indent << "y_min: ";
    Printer<double>::stream(s, indent + "  ", v.y_min);
    s << indent << "v_max: ";
    Printer<double>::stream(s, indent + "  ", v.v_max);
    s << indent << "p_max: ";
    Printer<double>::stream(s, indent + "  ", v.p_max);
    s << indent << "r_max: ";
    Printer<double>::stream(s, indent + "  ", v.r_max);
    s << indent << "s_max: ";
    Printer<double>::stream(s, indent + "  ", v.s_max);
    s << indent << "A[]" << std::endl;
    for (size_t i = 0; i < v.A.size(); ++i)
    {
      s << indent << "  A[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.A[i]);
    }
    s << indent << "B[]" << std::endl;
    for (size_t i = 0; i < v.B.size(); ++i)
    {
      s << indent << "  B[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.B[i]);
    }
    s << indent << "E[]" << std::endl;
    for (size_t i = 0; i < v.E.size(); ++i)
    {
      s << indent << "  E[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.E[i]);
    }
    s << indent << "rd[]" << std::endl;
    for (size_t i = 0; i < v.rd.size(); ++i)
    {
      s << indent << "  rd[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rd[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCTESTPKG_MESSAGE_MPC_LKREQUEST_H
