# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rctestpkg/CentralSignal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CentralSignal(genpy.Message):
  _md5sum = "7d4286309f6e1dd55dc49e54e2e770cf"
  _type = "rctestpkg/CentralSignal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool lanekeeping
bool right_lane
bool cruise_control
bool stop
float64 command_v
uint16 servo_pwm
"""
  __slots__ = ['lanekeeping','right_lane','cruise_control','stop','command_v','servo_pwm']
  _slot_types = ['bool','bool','bool','bool','float64','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lanekeeping,right_lane,cruise_control,stop,command_v,servo_pwm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CentralSignal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lanekeeping is None:
        self.lanekeeping = False
      if self.right_lane is None:
        self.right_lane = False
      if self.cruise_control is None:
        self.cruise_control = False
      if self.stop is None:
        self.stop = False
      if self.command_v is None:
        self.command_v = 0.
      if self.servo_pwm is None:
        self.servo_pwm = 0
    else:
      self.lanekeeping = False
      self.right_lane = False
      self.cruise_control = False
      self.stop = False
      self.command_v = 0.
      self.servo_pwm = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4BdH.pack(_x.lanekeeping, _x.right_lane, _x.cruise_control, _x.stop, _x.command_v, _x.servo_pwm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.lanekeeping, _x.right_lane, _x.cruise_control, _x.stop, _x.command_v, _x.servo_pwm,) = _struct_4BdH.unpack(str[start:end])
      self.lanekeeping = bool(self.lanekeeping)
      self.right_lane = bool(self.right_lane)
      self.cruise_control = bool(self.cruise_control)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4BdH.pack(_x.lanekeeping, _x.right_lane, _x.cruise_control, _x.stop, _x.command_v, _x.servo_pwm))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.lanekeeping, _x.right_lane, _x.cruise_control, _x.stop, _x.command_v, _x.servo_pwm,) = _struct_4BdH.unpack(str[start:end])
      self.lanekeeping = bool(self.lanekeeping)
      self.right_lane = bool(self.right_lane)
      self.cruise_control = bool(self.cruise_control)
      self.stop = bool(self.stop)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4BdH = struct.Struct("<4BdH")
